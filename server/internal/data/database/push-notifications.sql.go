// Code generated by sqlc. DO NOT EDIT.
// source: push-notifications.sql

package database

import (
	"context"
)

const addUserPushToken = `-- name: AddUserPushToken :exec
INSERT INTO user_push_tokens (userid, platform, token)
VALUES ($1, $2, $3)
ON CONFLICT DO NOTHING
`

type AddUserPushTokenParams struct {
	Userid   int32          `json:"userid"`
	Platform MobilePlatform `json:"platform"`
	Token    string         `json:"token"`
}

// Adds push token to the database for a given user and platform
func (q *Queries) AddUserPushToken(ctx context.Context, arg AddUserPushTokenParams) error {
	_, err := q.db.ExecContext(ctx, addUserPushToken, arg.Userid, arg.Platform, arg.Token)
	return err
}

const getPushTokensForUser = `-- name: GetPushTokensForUser :many
SELECT userid, platform, token
FROM user_push_tokens
WHERE userid = $1
`

// Gives all push notification tokens for given user
func (q *Queries) GetPushTokensForUser(ctx context.Context, userid int32) ([]UserPushToken, error) {
	rows, err := q.db.QueryContext(ctx, getPushTokensForUser, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPushToken
	for rows.Next() {
		var i UserPushToken
		if err := rows.Scan(&i.Userid, &i.Platform, &i.Token); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
