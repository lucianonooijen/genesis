// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package queries

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO genesis_server.users
    (email, password_hash, first_name)
VALUES
    ($1, $2, $3)
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
	FirstName    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Email, arg.PasswordHash, arg.FirstName)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, user_uuid, password_hash, password_uuid, email, first_name, created_at FROM genesis_server.users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GenesisServerUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GenesisServerUser
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.PasswordHash,
		&i.PasswordUuid,
		&i.Email,
		&i.FirstName,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, user_uuid, password_hash, password_uuid, email, first_name, created_at FROM genesis_server.users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GenesisServerUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GenesisServerUser
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.PasswordHash,
		&i.PasswordUuid,
		&i.Email,
		&i.FirstName,
		&i.CreatedAt,
	)
	return i, err
}
