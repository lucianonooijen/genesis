// Code generated by sqlc. DO NOT EDIT.
// source: password-reset.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addPasswordForgotForUser = `-- name: AddPasswordForgotForUser :exec
INSERT INTO genesis_server.password_forgot(user_id)
VALUES ($1)
ON CONFLICT (user_id)
DO UPDATE SET
    reset_token = DEFAULT,
    valid_until = DEFAULT,
    is_used = DEFAULT
`

func (q *Queries) AddPasswordForgotForUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, addPasswordForgotForUser, userID)
	return err
}

const getPasswordResetByResetToken = `-- name: GetPasswordResetByResetToken :one
SELECT user_id, reset_token, valid_until, is_used FROM genesis_server.password_forgot
WHERE reset_token = $1
`

func (q *Queries) GetPasswordResetByResetToken(ctx context.Context, resetToken uuid.UUID) (GenesisServerPasswordForgot, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetByResetToken, resetToken)
	var i GenesisServerPasswordForgot
	err := row.Scan(
		&i.UserID,
		&i.ResetToken,
		&i.ValidUntil,
		&i.IsUsed,
	)
	return i, err
}

const getPasswordResetByUserId = `-- name: GetPasswordResetByUserId :one
SELECT user_id, reset_token, valid_until, is_used FROM genesis_server.password_forgot
WHERE user_id = $1
`

func (q *Queries) GetPasswordResetByUserId(ctx context.Context, userID int32) (GenesisServerPasswordForgot, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetByUserId, userID)
	var i GenesisServerPasswordForgot
	err := row.Scan(
		&i.UserID,
		&i.ResetToken,
		&i.ValidUntil,
		&i.IsUsed,
	)
	return i, err
}

const markResetTokenUsed = `-- name: MarkResetTokenUsed :exec
UPDATE genesis_server.password_forgot
SET is_used = true
WHERE user_id = $1
`

func (q *Queries) MarkResetTokenUsed(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, markResetTokenUsed, userID)
	return err
}
