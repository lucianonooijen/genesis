// Package swagger GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package swagger

import "github.com/swaggo/swag"

const docTemplate_swagger = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Customer Support",
            "url": "https://genesis.bytecode.nl",
            "email": "support@genesis.bytecode.nl"
        },
        "license": {
            "name": "GPL-3.0-only",
            "url": "https://www.gnu.org/licenses/gpl-3.0.txt"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/app-version": {
            "get": {
                "description": "To be used with for checking app status based on HTTP version headers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "App version check handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client version code (semver)",
                        "name": "X-Genesis-Client-Version",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "500": {
                        "description": ""
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "To be used with for status pings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "Status handler",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "500": {
                        "description": ""
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Log into user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User_Auth"
                ],
                "summary": "Log into user account",
                "parameters": [
                    {
                        "description": "Username and password",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JwtResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "426": {
                        "description": "Upgrade Required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    }
                }
            }
        },
        "/user/password-reset/complete": {
            "post": {
                "description": "Complete password request using reset token and new password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User_PasswordReset"
                ],
                "summary": "Complete password reset",
                "parameters": [
                    {
                        "description": "ResetData",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.PasswordResetCompleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.JwtResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "426": {
                        "description": "Upgrade Required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    }
                }
            }
        },
        "/user/password-reset/start": {
            "post": {
                "description": "Start password request by sending a reset token to a user's email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User_PasswordReset"
                ],
                "summary": "Begin password reset",
                "parameters": [
                    {
                        "description": "AccountData",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.PasswordResetStartRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "426": {
                        "description": "Upgrade Required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "JWT_User": []
                    }
                ],
                "description": "Fetches the user account for logged-in user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User_Account"
                ],
                "summary": "Fetch user account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "426": {
                        "description": "Upgrade Required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JWT_User": []
                    }
                ],
                "description": "Updates the user account for logged-in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User_Account"
                ],
                "summary": "Update user account",
                "parameters": [
                    {
                        "description": "Profile",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UserProfile"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.UserProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "426": {
                        "description": "Upgrade Required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT_User": []
                    }
                ],
                "description": "Deletes logged-in user's account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User_Account"
                ],
                "summary": "Delete user account",
                "parameters": [
                    {
                        "description": "Password",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.DeleteAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "426": {
                        "description": "Upgrade Required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    }
                }
            }
        },
        "/user/push-notifications": {
            "post": {
                "security": [
                    {
                        "JWT_User": []
                    }
                ],
                "description": "Saves a push notification token for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User_PushNotifications"
                ],
                "summary": "Register push notification token",
                "parameters": [
                    {
                        "description": "Token data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.PushNotificationRegister"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "426": {
                        "description": "Upgrade Required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Create a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User_Auth"
                ],
                "summary": "Create user account",
                "parameters": [
                    {
                        "description": "New account data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.NewUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.JwtResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "426": {
                        "description": "Upgrade Required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorBody"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.DeleteAccountRequest": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "entities.JwtResponse": {
            "type": "object",
            "properties": {
                "jwt": {
                    "type": "string"
                }
            }
        },
        "entities.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "entities.NewUserRequest": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "entities.PasswordResetCompleteRequest": {
            "type": "object",
            "required": [
                "password",
                "resetToken"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "resetToken": {
                    "type": "string"
                }
            }
        },
        "entities.PasswordResetStartRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "entities.PushNotificationRegister": {
            "type": "object",
            "required": [
                "platform",
                "token"
            ],
            "properties": {
                "platform": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "entities.UserProfile": {
            "type": "object",
            "required": [
                "firstName"
            ],
            "properties": {
                "firstName": {
                    "type": "string"
                }
            }
        },
        "responses.ErrorBody": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "Detail contains details about the error",
                    "type": "string",
                    "example": "Slightly longer error detail"
                },
                "rawError": {
                    "description": "RawError contains the raw error data"
                },
                "status": {
                    "description": "Status contains the HTTP status code",
                    "type": "integer",
                    "example": 418
                },
                "title": {
                    "description": "Title is the human-readable error",
                    "type": "string",
                    "example": "Error title"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT_User": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo_swagger holds exported Swagger Info so clients can modify it
var SwaggerInfo_swagger = &swag.Spec{
	Version:          "1",
	Host:             "api.genesis.bytecode.nl",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Genesis",
	Description:      "Genesis API server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate_swagger,
}

func init() {
	swag.Register(SwaggerInfo_swagger.InstanceName(), SwaggerInfo_swagger)
}
