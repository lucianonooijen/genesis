##########################
# BASE CONFIG
##########################
.release_base: &release_base
  image: node:16-alpine
  stage: release
  before_script:
    - apk add git
    - yarn install --network-timeout 1000000
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/

##########################
# COMMIT LINT
##########################
commitlint:
  extends: .release_base
  stage: test_lint
  script:
    - yarn run commitlint
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: $CI_COMMIT_TAG
      when: never
  needs: []

##########################
# SEMANTIC RELEASE
##########################
semantic_release:
  extends: .release_base
  script:
    - yarn run semantic-release
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
      allow_failure: true
      # The combination `when: manual` and `allow_failure: true` allow this step to be manual without blocking
      # the pipeline. See https://docs.gitlab.com/ee/ci/yaml/README.html#rulesallow_failure

##########################
# EAS RELEASE FOR APP
##########################
app_release:
  image: node:16-alpine
  stage: release
  before_script:
    - cd app
    - apk add --no-cache bash git
  script:
    - npx eas-cli build --platform all --non-interactive --no-wait
  only:
    - tags

##########################
# RELEASE FOR SERVER
##########################
server_release:
  image: docker:20
  stage: release
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_REGISTRY: registry.digitalocean.com
    DOCKER_IMAGE_NAME: registry.digitalocean.com/dawny/genesis-server
  before_script:
    - cd server
    - docker info
    - echo -n "$DO_REGISTRY_API_KEY" | docker login --username "$DO_REGISTRY_API_KEY" --password-stdin "$DOCKER_REGISTRY"
    - export DOCKER_IMAGE_LATEST="$DOCKER_IMAGE_NAME:latest"
    - export DOCKER_IMAGE_TAG="$DOCKER_IMAGE_NAME:$CI_COMMIT_TAG"
    - echo "Building and pushing image '$DOCKER_IMAGE'"
  script:
    - docker pull "$DOCKER_IMAGE_NAME:latest" || true
    - docker build -t "$DOCKER_IMAGE_LATEST" -t "$DOCKER_IMAGE_TAG" .
    - docker push "$DOCKER_IMAGE_LATEST"
    - docker push "$DOCKER_IMAGE_TAG"
  only:
    - tags
  tags:
    - privileged
